// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Client {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  brideName          String
  groomName          String
  email              String      @unique
  secondaryEmail     String?
  phone              String?
  weddingDate        DateTime?
  weddingLocation    String?
  services           String[]
  packagePrice       String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  videoQuestionnaire Video?
  project            Project?
  wedding            Wedding?
  engagement         Engagement?
}

model Wedding {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String      @unique @db.ObjectId
  client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  weddingDate   DateTime
  mainPhotoId   String?     @db.ObjectId
  mainPhoto     Contractor? @relation("MainPhoto", fields: [mainPhotoId], references: [id])
  secondPhotoId String?     @db.ObjectId
  secondPhoto   Contractor? @relation("SecondPhoto", fields: [secondPhotoId], references: [id])
  mainVideoId   String?     @db.ObjectId
  mainVideo     Contractor? @relation("MainVideo", fields: [mainVideoId], references: [id])
  secondVideoId String?     @db.ObjectId
  secondVideo   Contractor? @relation("SecondVideo", fields: [secondVideoId], references: [id])
  photoboothId  String?      @db.ObjectId
  photobooth    Contractor? @relation("PhotoBooth", fields: [photoboothId], references: [id])
  notes WeddingNote[]
  payments ContractorPayment[]
}

model Engagement {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  engagementDate    DateTime?
  engagementLocation String?
  engagementDetails String?
  engagementCreated DateTime    @default(now())
  clientId          String      @unique @db.ObjectId
  client            Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  engagementId      String?     @db.ObjectId
  engagementBy      Contractor? @relation("Engagement", fields: [engagementId], references: [id], onDelete: Cascade)
}

model Project {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  projectDate       DateTime
  status            Status      @default(Shoot)
  photoEditDoneDate DateTime?
  videoEditDoneDate DateTime?
  clientId          String      @unique @db.ObjectId
  client            Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  photoEditId       String?     @db.ObjectId
  photoEdit         Contractor? @relation("PhotoEdit", fields: [photoEditId], references: [id], onDelete: Cascade)
  videoEditId       String?     @db.ObjectId
  videoEdit         Contractor? @relation("VideoEdit", fields: [videoEditId], references: [id], onDelete: Cascade)
}

model Contractor {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String?     @unique
  phone         String?
  role          String[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  photoEditBy   Project[]    @relation("PhotoEdit")
  videoEditBy   Project[]    @relation("VideoEdit")
  mainPhotoBy   Wedding[]    @relation("MainPhoto")
  secondPhotoBy Wedding[]    @relation("SecondPhoto")
  mainVideoBy   Wedding[]    @relation("MainVideo")
  secondVideoBy Wedding[]    @relation("SecondVideo")
  photoboothBy  Wedding[]   @relation("PhotoBooth")
  engagementBy  Engagement[] @relation("Engagement")
  paymentRate String[]
  payments ContractorPayment[]
}

model Video {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  brideName     String
  groomName     String
  email         String   @unique
  weddingDate   DateTime
  songsOptions  String
  highlightSong String?
  videoSongs    String?
  details       String
  address       String
  city          String
  state         String
  zipCode       String
  clientId      String   @unique @db.ObjectId
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model WeddingNote {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  weddingId String @db.ObjectId
  wedding Wedding @relation(fields: [weddingId], references: [id], onDelete: Cascade)
  note String
  createAt DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model ContractorPayment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  weddingId String @db.ObjectId
  wedding Wedding @relation(fields: [weddingId], references: [id], onDelete: Cascade)
  contractorId String @db.ObjectId
  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
}

enum Status {
  Shoot
  Backup
  Culled
  Edited
  Delivered
}
